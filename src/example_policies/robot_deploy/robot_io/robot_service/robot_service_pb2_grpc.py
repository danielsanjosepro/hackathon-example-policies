# Copyright 2025 Poke & Wiggle GmbH. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc
import robot_service_pb2 as robot__service__pb2

GRPC_GENERATED_VERSION = "1.74.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in robot_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class RobotServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ResetDrivers = channel.unary_unary(
            "/robot_service.RobotService/ResetDrivers",
            request_serializer=robot__service__pb2.ResetDriversRequest.SerializeToString,
            response_deserializer=robot__service__pb2.ResetDriversResponse.FromString,
            _registered_method=True,
        )
        self.PrepareExecution = channel.unary_unary(
            "/robot_service.RobotService/PrepareExecution",
            request_serializer=robot__service__pb2.PrepareExecutionRequest.SerializeToString,
            response_deserializer=robot__service__pb2.PrepareExecutionResponse.FromString,
            _registered_method=True,
        )
        self.GetState = channel.unary_unary(
            "/robot_service.RobotService/GetState",
            request_serializer=robot__service__pb2.GetStateRequest.SerializeToString,
            response_deserializer=robot__service__pb2.GetStateResponse.FromString,
            _registered_method=True,
        )
        self.StreamState = channel.unary_stream(
            "/robot_service.RobotService/StreamState",
            request_serializer=robot__service__pb2.StreamStateRequest.SerializeToString,
            response_deserializer=robot__service__pb2.State.FromString,
            _registered_method=True,
        )
        self.EnqueueCartesianTargets = channel.unary_unary(
            "/robot_service.RobotService/EnqueueCartesianTargets",
            request_serializer=robot__service__pb2.EnqueueCartesianTargetsRequest.SerializeToString,
            response_deserializer=robot__service__pb2.EnqueueCartesianTargetsResponse.FromString,
            _registered_method=True,
        )
        self.SetCartesianTarget = channel.unary_unary(
            "/robot_service.RobotService/SetCartesianTarget",
            request_serializer=robot__service__pb2.SetCartesianTargetRequest.SerializeToString,
            response_deserializer=robot__service__pb2.SetCartesianTargetResponse.FromString,
            _registered_method=True,
        )
        self.SetJointTarget = channel.unary_unary(
            "/robot_service.RobotService/SetJointTarget",
            request_serializer=robot__service__pb2.SetJointTargetRequest.SerializeToString,
            response_deserializer=robot__service__pb2.SetJointTargetResponse.FromString,
            _registered_method=True,
        )


class RobotServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ResetDrivers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PrepareExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StreamState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EnqueueCartesianTargets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetCartesianTarget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetJointTarget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RobotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ResetDrivers": grpc.unary_unary_rpc_method_handler(
            servicer.ResetDrivers,
            request_deserializer=robot__service__pb2.ResetDriversRequest.FromString,
            response_serializer=robot__service__pb2.ResetDriversResponse.SerializeToString,
        ),
        "PrepareExecution": grpc.unary_unary_rpc_method_handler(
            servicer.PrepareExecution,
            request_deserializer=robot__service__pb2.PrepareExecutionRequest.FromString,
            response_serializer=robot__service__pb2.PrepareExecutionResponse.SerializeToString,
        ),
        "GetState": grpc.unary_unary_rpc_method_handler(
            servicer.GetState,
            request_deserializer=robot__service__pb2.GetStateRequest.FromString,
            response_serializer=robot__service__pb2.GetStateResponse.SerializeToString,
        ),
        "StreamState": grpc.unary_stream_rpc_method_handler(
            servicer.StreamState,
            request_deserializer=robot__service__pb2.StreamStateRequest.FromString,
            response_serializer=robot__service__pb2.State.SerializeToString,
        ),
        "EnqueueCartesianTargets": grpc.unary_unary_rpc_method_handler(
            servicer.EnqueueCartesianTargets,
            request_deserializer=robot__service__pb2.EnqueueCartesianTargetsRequest.FromString,
            response_serializer=robot__service__pb2.EnqueueCartesianTargetsResponse.SerializeToString,
        ),
        "SetCartesianTarget": grpc.unary_unary_rpc_method_handler(
            servicer.SetCartesianTarget,
            request_deserializer=robot__service__pb2.SetCartesianTargetRequest.FromString,
            response_serializer=robot__service__pb2.SetCartesianTargetResponse.SerializeToString,
        ),
        "SetJointTarget": grpc.unary_unary_rpc_method_handler(
            servicer.SetJointTarget,
            request_deserializer=robot__service__pb2.SetJointTargetRequest.FromString,
            response_serializer=robot__service__pb2.SetJointTargetResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "robot_service.RobotService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "robot_service.RobotService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class RobotService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ResetDrivers(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/robot_service.RobotService/ResetDrivers",
            robot__service__pb2.ResetDriversRequest.SerializeToString,
            robot__service__pb2.ResetDriversResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def PrepareExecution(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/robot_service.RobotService/PrepareExecution",
            robot__service__pb2.PrepareExecutionRequest.SerializeToString,
            robot__service__pb2.PrepareExecutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetState(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/robot_service.RobotService/GetState",
            robot__service__pb2.GetStateRequest.SerializeToString,
            robot__service__pb2.GetStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def StreamState(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/robot_service.RobotService/StreamState",
            robot__service__pb2.StreamStateRequest.SerializeToString,
            robot__service__pb2.State.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def EnqueueCartesianTargets(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/robot_service.RobotService/EnqueueCartesianTargets",
            robot__service__pb2.EnqueueCartesianTargetsRequest.SerializeToString,
            robot__service__pb2.EnqueueCartesianTargetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SetCartesianTarget(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/robot_service.RobotService/SetCartesianTarget",
            robot__service__pb2.SetCartesianTargetRequest.SerializeToString,
            robot__service__pb2.SetCartesianTargetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SetJointTarget(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/robot_service.RobotService/SetJointTarget",
            robot__service__pb2.SetJointTargetRequest.SerializeToString,
            robot__service__pb2.SetJointTargetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
