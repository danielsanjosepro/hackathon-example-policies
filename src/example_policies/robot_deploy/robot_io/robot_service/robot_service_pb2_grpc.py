# Copyright 2025 Poke & Wiggle GmbH. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc

from . import robot_service_pb2 as robot__service__pb2

GRPC_GENERATED_VERSION = "1.74.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in robot_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class RobotServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamSnapshot = channel.unary_stream(
            "/robot_service.RobotService/StreamSnapshot",
            request_serializer=robot__service__pb2.StreamSnapshotRequest.SerializeToString,
            response_deserializer=robot__service__pb2.SnapshotResponse.FromString,
            _registered_method=True,
        )
        self.GetSnapshot = channel.unary_unary(
            "/robot_service.RobotService/GetSnapshot",
            request_serializer=robot__service__pb2.GetSnapshotRequest.SerializeToString,
            response_deserializer=robot__service__pb2.SnapshotResponse.FromString,
            _registered_method=True,
        )
        self.SetTarget = channel.unary_unary(
            "/robot_service.RobotService/SetTarget",
            request_serializer=robot__service__pb2.SetTargetRequest.SerializeToString,
            response_deserializer=robot__service__pb2.SetTargetResponse.FromString,
            _registered_method=True,
        )


class RobotServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetTarget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RobotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StreamSnapshot": grpc.unary_stream_rpc_method_handler(
            servicer.StreamSnapshot,
            request_deserializer=robot__service__pb2.StreamSnapshotRequest.FromString,
            response_serializer=robot__service__pb2.SnapshotResponse.SerializeToString,
        ),
        "GetSnapshot": grpc.unary_unary_rpc_method_handler(
            servicer.GetSnapshot,
            request_deserializer=robot__service__pb2.GetSnapshotRequest.FromString,
            response_serializer=robot__service__pb2.SnapshotResponse.SerializeToString,
        ),
        "SetTarget": grpc.unary_unary_rpc_method_handler(
            servicer.SetTarget,
            request_deserializer=robot__service__pb2.SetTargetRequest.FromString,
            response_serializer=robot__service__pb2.SetTargetResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "robot_service.RobotService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "robot_service.RobotService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class RobotService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamSnapshot(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/robot_service.RobotService/StreamSnapshot",
            robot__service__pb2.StreamSnapshotRequest.SerializeToString,
            robot__service__pb2.SnapshotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetSnapshot(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/robot_service.RobotService/GetSnapshot",
            robot__service__pb2.GetSnapshotRequest.SerializeToString,
            robot__service__pb2.SnapshotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SetTarget(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/robot_service.RobotService/SetTarget",
            robot__service__pb2.SetTargetRequest.SerializeToString,
            robot__service__pb2.SetTargetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
